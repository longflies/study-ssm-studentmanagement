1. 新建properties文件后，中文乱码
	原因：properties文件默认编码格式为ISO-8859-1
	修改方式：Window --> Preferences --> General --> Content Types --> Text --> Java Properties File --> 将Default encoding改为utf-8


2. 想要利用mybatis-generator自动生成代码
	1) 在pom.xml中添加plugin
		<plugin>
		    <groupId>org.mybatis.generator</groupId>
		    <artifactId>mybatis-generator-maven-plugin</artifactId>
		    <version>1.3.2</version>
		    <configuration>
		        <configurationFile>src/main/resources/mybatis-generator/generatorConfig.xml</configurationFile>
		        <verbose>true</verbose>
		        <overwrite>true</overwrite>
		    </configuration>
		    <executions>
		        <execution>
		            <id>Generate MyBatis Artifacts</id>
		            <goals>
		                <goal>generate</goal>
		            </goals>
		        </execution>
		    </executions>
		    <dependencies>
		        <dependency>
		            <groupId>org.mybatis.generator</groupId>
		            <artifactId>mybatis-generator-core</artifactId>
		            <version>1.3.2</version>
		        </dependency>
		    </dependencies>
		</plugin>
	2) 新建generatorConfig.xml文件
		具体内容及各个配置详解见generatorConfig_note.xml
		
		
3. 解决问题2的过程中发现pom.xml中的<execution>标签报错
	错误信息如下：
		Plugin execution not covered by lifecycle configuration: org.mybatis.generator:mybatis-generator-maven-plugin:1.3.2:generate (execution: Generate MyBatis Artifacts, phase: generate-sources)
	原因及解决办法：
		关于M2E 的Eclipse插件，目前还不支持execution 
		报如下错误 
			Plugin execution not covered by lifecycle configuration 
		官方文档给出的如下 
			http://wiki.eclipse.org/M2E_plugin_execution_not_covered 
		这里注意添加如下代码，要与plugins级别并列添加：
			<pluginManagement>  
	            <plugins>  
	                <plugin>  
	                    <groupId>org.eclipse.m2e</groupId>  
	                    <artifactId>lifecycle-mapping</artifactId>  
	                    <version>1.0.0</version>  
	                    <configuration>  
	                        <lifecycleMappingMetadata>  
	                            <pluginExecutions>  
	                                <!-- copy-dependency plugin -->  
	                                <pluginExecution>  
	                                    <pluginExecutionFilter>  
	                                        <groupId>org.apache.maven.plugins</groupId>  
	                                        <artifactId>maven-dependency-plugin</artifactId>  
	                                        <versionRange>[1.0.0,)</versionRange>  
	                                        <goals>  
	                                            <goal>copy-dependencies</goal>  
	                                        </goals>  
	                                    </pluginExecutionFilter>  
	                                    <action>  
	                                        <ignore />  
	                                    </action>  
	                                </pluginExecution>  
	  
	                                <!-- mybatis-generator-plugin -->  
	                                <pluginExecution>  
	                                    <pluginExecutionFilter>  
	                                        <groupId>org.mybatis.generator</groupId>  
	                                        <artifactId>mybatis-generator-maven-plugin</artifactId>  
	                                        <versionRange>[1.3.2,)</versionRange>  
	                                        <goals>  
	                                            <goal>generate</goal>  
	                                        </goals>  
	                                    </pluginExecutionFilter>  
	                                    <action>  
	                                        <ignore />  
	                                    </action>  
	                                </pluginExecution>  
	                            </pluginExecutions>  
	                        </lifecycleMappingMetadata>  
	                    </configuration>  
	                </plugin>  
	            </plugins>  
	        </pluginManagement>
	        
	        
4. 解决问题3后，又出现了Cannot change version of project facet Dynamic web module to 2.3错误
	解决方式：
		1)web.xml中2.3改为3.0
			<?xml version="1.0" encoding="UTF-8"?>
			  <web-app xmlns="http://java.sun.com/xml/ns/javaee"
			    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
			                        http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
			    version="3.0">
			    <welcome-file-list>
			      <welcome-file>index.jsp</welcome-file>
			    </welcome-file-list>
			 </web-app>
		2)在Navigator下打开项目.settings目录下的org.eclipse.jdt.core.prefs --> 把1.5改成1.8
		3)打开org.eclipse.wst.common.component --> 把project-version="1.5.0"改成project-version="1.8.0"
		4)打开org.eclipse.wst.common.project.facet.core.xml --> 把<installed facet="java" version="1.5"/>改成<installed facet="java" version="1.8"/>，把  <installed facet="jst.web" version="2.3"/>改成  <installed facet="jst.web" version="3.0"/>


5. 解决问题4后，又出现了Dynamic Web Module 3.0 requires Java 1.6 or newer错误
	原因：maven update后jre配置变回了1.5
	解决方式：
		第一种：
			修改maven的settings.xml文件
				<profile>    
				    <id>jdk-1.8</id>    
				    <activation>    
				        <activeByDefault>true</activeByDefault>    
				        <jdk>1.8</jdk>    
				    </activation>    
				    <properties>    
				        <maven.compiler.source>1.8</maven.compiler.source>    
				        <maven.compiler.target>1.8</maven.compiler.target>    
				        <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>    
				    </properties>    
				</profile>
		第二种：
			修改pom.xml文件
				<build>
				  <plugins>
				    <plugin>
				      <groupId>org.apache.maven.plugins</groupId>
				      <artifactId>maven-compiler-plugin</artifactId>
				      <configuration>
				        <source>1.8</source>
				        <target>1.8</target>
				      </configuration>
				    </plugin>
				  </plugins>
				</build>
				修改完成后maven update


6. Run As --> Maven generate-sources时报错java.lang.NoClassDefFoundError: org/mybatis/generator/exception/InvalidConfigurationException
	解决方式：
		把org/mybatis/generator下面的jar包删除，然后运行maven重新生成


7. Run As --> Maven generate-sources时提示文件夹不存在
	解决方式：
		将targetProject="studyssmstudentmanagement/src/main/java"改为targetProject="src/main/java"
		
		
8. 使用@Controller注解时提示Controller cannot be resolved to a type，将还没有代码的项目放入tomcat运行，报错如下（省略次要信息）：
	严重: A child container failed during start
	java.util.concurrent.ExecutionException: org.apache.catalina.LifecycleException: Failed to initialize component [org.apache.catalina.webresources.JarResourceSet@3d921e20]
	Caused by: org.apache.catalina.LifecycleException: Failed to initialize component [org.apache.catalina.webresources.JarResourceSet@3d921e20]
	Caused by: java.lang.IllegalArgumentException: java.util.zip.ZipException: invalid LOC header (bad signature)
	Caused by: java.util.zip.ZipException: invalid LOC header (bad signature)
	查找资料后怀疑为jar包有问题：jar包冲突或缺失。
	解决方式：
		1. 右击项目 --> Run As --> Maven test  这时控制台会报哪个jar包出错(也可以打开DOS命令窗口，切换至项目目录，运行mvn test命令，和Eclipse的控制台输出信息一致)。
		2. 如果步骤1不报错，则需要手动对照pom.xml文件和本地仓库jar包是否都正常。
		
		
9. 报错：
	[org.springframework.web.context.ContextLoader] - Context initialization failed
  	org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [spring-mybatis.xml]: Initialization of bean failed; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert property value of type 'java.lang.String' to required type 'org.springframework.core.io.Resource[]' for property 'mapperLocations'; nested exception is java.lang.IllegalArgumentException: Could not resolve resource location pattern [classpath:study/ssm/studentmanagement/mappers/*.xml]: class path resource [study/ssm/studentmanagement/mappers/] cannot be resolved to URL because it does not exist
  	原因是spring-mybatis.xml中路径配置错误
  	将
  		<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
	    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
	        <property name="dataSource" ref="dataSource" />  
	        <!-- 自动扫描mapping.xml文件 -->  
	        <property name="mapperLocations" value="classpath:study/ssm/studentmanagement/mappers/*.xml"></property>  
	    </bean>
	改为
		<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
	    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
	        <property name="dataSource" ref="dataSource" />  
	        <!-- 自动扫描mapping.xml文件 -->  
	        <property name="mapperLocations" value="classpath:mappers/*.xml"></property>  
	    </bean>
	    
	    
10. 报错：java.lang.ClassNotFoundException: com.mysql.jdbc.Driver  
	原因是jdbc.properties文件中的配置是复制的，com.mysql.jdbc.Driver后面有空格，所以程序不认识，其他字段也是同样的问题。
	
11. 返回的数据是html格式而不是json格式的
	解决方式：引入jackson相关jar包，Controller的方法上加上@ResponseBody注解即可。